type: edu
files:
- name: src/tictactoe/Main.kt
  visible: true
  text: |-
    package tictactoe

    fun main() {
        // write your code here
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.MainKt;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                System.arraycopy(field[row], 0, this.field[row], 0, 3);
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] = FieldState.get(str.charAt((row * 3 + col)));
                }
            }
        }

        FieldState get(int x, int y) {
            return field[y - 1][x - 1];
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        boolean isWinning(FieldState side) {
            if (side == FieldState.FREE) {
                return false;
            }

            if (get(1, 1) == side &&
                get(1, 2) == side &&
                get(1, 3) == side) {
                return true;
            }

            if (get(2, 1) == side &&
                get(2, 2) == side &&
                get(2, 3) == side) {
                return true;
            }

            if (get(3, 1) == side &&
                get(3, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 1) == side &&
                get(3, 1) == side) {
                return true;
            }

            if (get(1, 2) == side &&
                get(2, 2) == side &&
                get(3, 2) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 3) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 2) == side &&
                get(3, 1) == side) {
                return true;
            }

            return false;
        }

        boolean isDraw() {
            if (isWinning(FieldState.X) || isWinning(FieldState.O)) {
                return false;
            }
            for (int x = 1; x <= 3; x++) {
                for (int y = 1; y <= 3; y++) {
                    if (get(x, y) == FieldState.FREE) {
                        return false;
                    }
                }
            }
            return true;
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 0;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y++;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() throws Exception {
            super(MainKt.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {

                Random random = new Random();
                String randomInput = "";
                for (int j = 0; j < 10; j++) {
                    int randX = random.nextInt(4) + 1;
                    int randY = random.nextInt(4) + 1;
                    randomInput += randX + " " + randY + "\n";
                }

                String fullMoveInput = randomInput
                    + iterateCells(input) + iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput)
                    .setAttach(new Clue(x, y)));

                i++;
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            List<String> lines = reply
                .strip()
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String lastLine = lines.get(lines.size() - 1);

            if (! (lastLine.contains("X wins")
                || lastLine.contains("O wins")
                || lastLine.contains("Draw")
            )) {
                return new CheckResult(false,
                    "Can't parse final result, " +
                        "should contain \"Draw\", \"X wins\" or \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"O wins\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("O wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"O wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            TicTacToeField lastField = fields.get(fields.size() - 1);

            if (lastField.isWinning(FieldState.X) && !lastLine.contains("X wins")) {
                return new CheckResult(false,
                    "Your last field shows that X wins, " +
                        "and your last line should contain \"X wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.O) && !lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your last field shows that O wins, " +
                        "and your last line should contain \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isDraw() && !lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your last field shows that there is a draw, " +
                        "and your last line should contain \"Draw\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.X) ||
                lastField.isWinning(FieldState.O) ||
                lastField.isDraw()) {
                return CheckResult.correct();
            }

            return CheckResult.wrong(
                "Your last field contains unfinished game, the game should be finished!"
            );
        }
    }
  learner_created: false
- name: test/tictactoe/CellTest.kt
  visible: true
  text: |-
    package tictactoe

    import org.junit.Test
    import org.junit.Assert.*
    import tictactoe.CellsHelper.Companion.countOCells
    import tictactoe.CellsHelper.Companion.countXCells
    import tictactoe.CellsHelper.Companion.hasEmptyCells

    class CellTest {
        companion object {
            const val CELLS_WITH_ROW_0_TAKEN_BY_X = "XXXO_OOO_"
            const val CELLS_WITH_COLUMN_TAKEN_BY_O = "XO_XO__O_"
            const val CELLS_WITH_SLASH_LINE_TAKEN_BY_O = "X_OXO_O__"
            const val CELLS_WITH_BACK_SLASH_LINE_TAKEN_BY_X = "X_O_XO_OX"
            const val CELLS_WITH_NO_LINE_TAKEN = "XO_______"
            const val CELLS_WITH_REGULAR_CHARACTERS_AND_LENGTH = "XOXO_____"
            const val CELLS_TOO_SHORT = "XOXO__"
            const val CELLS_TOO_LONG = "XOXO_____XO" //11 characters
            const val CELLS_WITH_INVALID_CHARACTERS = "XOXO1#_ _"
            const val CELLS_WITH_PLAYER_CELLS_COUNT_OFF_BALANCE = "XXXO_____"
            const val CELLS_WITH_PLAYER_CELLS_COUNT_OK = "XXOO_____"
            const val CELLS_WITH_UNFINISHED_GAME = "XXOO_____"
            const val CELLS_WITH_STALE_MATE = "XOXXXOOXO"
        }

        @Test
        fun testTest() {
            assertTrue(true)
        }

        class HasEmptyCellsTest {
            @Test
            fun should_detect_empty_cells() {
                val expected = true
                val actual = hasEmptyCells("XXXOO__O_")
                assert(actual == expected) { "Should detect empty cell. result: $actual" }
            }

            @Test
            fun should_not_detect_empty_cell() {
                val expected = false
                val actual = hasEmptyCells("XXXOOXXO0")
                assert(actual == expected) { "Should not detect empty cell. result: $actual" }
            }
        }

        class CountXCellsTest {
            @Test
            fun should_count_x_cells() {
                val expected = 3
                val actual = countXCells("XXXOO__O_")
                assert(actual == expected) { "Should count $expected X cells. Counted: $actual" }
            }

            @Test
            fun should_count_0_x_cells() {
                val expected = 0
                val actual = countXCells("___OO__O_")
                assert(actual == expected) { "Should count $expected X cells. Counted: $actual" }
            }
        }

        class CountOCellsTest {
            @Test
            fun should_count_x_cells() {
                val expected = 4
                val actual = countOCells("XXXOO_OO_")
                assert(actual == expected) { "Should count $expected O cells. Counted: $actual" }
            }

            @Test
            fun should_count_0_O_cells() {
                val expected = 0
                val actual = countOCells("XXX___XX_")
                assert(actual == expected) { "Should count $expected X cells. Counted: $actual" }
            }
        }

        class CountPlayerCellsTest {
            @Test
            fun should_deliver_player_cell_counts() {
                val actual = countPlayerCells("XXXOO_OO_")
                assert(actual.first > 0) { "Should deliver X cells. delivered: ${actual.first}" }
                assert(actual.second > 0) { "Should deliver O cells. delivered: ${actual.second}" }
            }
        }

        class GetPlayerCellTest {
            @Test
            fun should_deliver_player_x_cell_token() {
                val actual = getPlayerToken(Player.X)
                assert(actual == X_CELL) { "Should deliver X cell. delivered: $actual" }
            }

            @Test
            fun should_deliver_player_o_cell_token() {
                val actual = getPlayerToken(Player.O)
                assert(actual == O_CELL) { "Should deliver O cell. delivered: $actual" }
            }
        }

        class TakenLinesCountTest {
            @Test
            fun should_detect_that_no_line_taken_by_x() {
                val expected = 0
                val actual = takenLinesCount(CELLS_WITH_NO_LINE_TAKEN, Player.X)
                assert(actual == expected) { "Should detect that no row taken. expected: $expected, actual: $actual" }
            }

            @Test
            fun should_detect_row_taken_by_x() {
                val expected = 1
                val actual = takenLinesCount(CELLS_WITH_ROW_0_TAKEN_BY_X, Player.X)
                assert(actual == expected) { "Should detect taken row. expected: $expected, actual: $actual" }
            }

            @Test
            fun should_detect_that_column_taken_by_o() {
                val expected = 1
                val actual = takenLinesCount(CELLS_WITH_COLUMN_TAKEN_BY_O, Player.O)
                assert(actual == expected) { "Should detect column taken. expected: $expected, actual: $actual" }
            }

            @Test
            fun should_detect_that_slash_line_taken_by_o() {
                val expected = 1
                val actual = takenLinesCount(CELLS_WITH_SLASH_LINE_TAKEN_BY_O, Player.O)
                assert(actual == expected) { "Should detect slash line taken. expected: $expected, actual: $actual" }
            }

            @Test
            fun should_detect_that_back_slash_line_taken_by_x() {
                val expected = 1
                val actual = takenLinesCount(CELLS_WITH_BACK_SLASH_LINE_TAKEN_BY_X, Player.X)
                assert(actual == expected) { "Should detect back slash line taken. expected: $expected, actual: $actual" }
            }
        }

        class HasValidCharactersTest {
            @Test
            fun should_detect_that_cells_contains_right_characters_only() {
                val expected = true
                val actual = hasValidCharacters(CELLS_WITH_REGULAR_CHARACTERS_AND_LENGTH)
                assert(actual == expected) {
                    "Should detect that cells contains valid characters only. " +
                            "expected: $expected, actual: $actual"
                }
            }

            @Test
            fun should_detect_that_cells_contains_invalid_characters() {
                val expected = false
                val actual = hasValidCharacters(CELLS_WITH_INVALID_CHARACTERS)
                assert(actual == expected) {
                    "Should detect that cells contains invalid characters." +
                            " expected: $expected, actual: $actual"
                }
            }
        }

        class HasValidLengthTest {
            @Test
            fun should_detect_that_cells_length_is_ok() {
                val expected = true
                val actual = hasValidLength(CELLS_WITH_REGULAR_CHARACTERS_AND_LENGTH)
                assert(actual == expected) {
                    "Should detect that cell length is ok. " +
                            "expected: $expected, actual: $actual"
                }
            }

            @Test
            fun should_detect_cells_too_short() {
                val expected = false
                val actual = hasValidLength(CELLS_TOO_SHORT)
                assert(actual == expected) {
                    "Should detect that cell length is too short. " +
                            "expected: $expected, actual: $actual"
                }
            }

            @Test
            fun should_detect_cells_too_long() {
                val expected = false
                val actual = hasValidLength(CELLS_TOO_LONG)
                assert(actual == expected) {
                    "Should detect that cell length is too long. " +
                            "expected: $expected, actual: $actual"
                }
            }
        }

        class IsWinnerTest {
            @Test
            fun should_detect_player_is_winner() {
                val expected = true
                val actual = isWinner(Player.X, CELLS_WITH_ROW_0_TAKEN_BY_X)
                assert(actual == expected) {
                    "Should detect that X is winner. " +
                            "expected: $expected, actual: $actual"
                }
            }

            @Test
            fun should_detect_that_player_is_not_winner() {
                val expected = false
                val actual = isWinner(Player.O, CELLS_WITH_ROW_0_TAKEN_BY_X)
                assert(actual == expected) {
                    "Should detect that player is not winner. " +
                            "expected: $expected, actual: $actual"
                }
            }
        }

        class CheckGameStateTest {
            @Test
            fun should_detect_stale_mate() {
                val expected = GameState.StaleMate
                val actual = checkGameState(CELLS_WITH_STALE_MATE)
                assert(actual == expected) {
                    "Should detect stale mate" +
                            "expected: $expected, actual: $actual"
                }
            }

            @Test
            fun should_detect_game_goes_on() {
                val expected = GameState.GameGoesOn
                val actual = checkGameState(CELLS_WITH_UNFINISHED_GAME)
                assert(actual == expected) {
                    "Should detect game goes on" +
                            "expected: $expected, actual: $actual"
                }
            }
        }

        class IsPlayerCellsCountOkTest {
            @Test
            fun should_detect_player_cells_count_ok() {
                val expected = true
                val actual = isPlayerCellsCountOk(CELLS_WITH_PLAYER_CELLS_COUNT_OK)
                assert(actual == expected) {
                    "Should detect that player cells count ok" +
                            "expected: $expected, actual: $actual"
                }
            }

            @Test
            fun should_detect_player_cells_count_wrong() {
                val expected = false
                val actual = isPlayerCellsCountOk(CELLS_WITH_PLAYER_CELLS_COUNT_OFF_BALANCE)
                assert(actual == expected) {
                    "Should detect that player cells count off balance" +
                            " expected: $expected, actual: $actual"
                }
            }
        }
    }
  learner_created: false
- name: test/tictactoe/ReadCoordinateTest.kt
  visible: true
  text: |-
    package tictactoe

    import org.junit.Assert.*
    import org.junit.Test

    class ReadCoordinateTest {
        companion object {
            const val CELLS = "X_X_O____"
        }

        @Test
        fun testTest() {
            assertTrue(true)
        }

        class GetMoveTest {
            @Test
            fun returns_a_result() {
                val expected = 2 to 3
                val actual = MoveMaker().getMove(CELLS, expected)
                assertEquals(expected, actual)
            }
        }

        class ReadCoordinatesFromConsoleTest {
            @Test
            fun should_return_values() {
                val expected = 1 to 2
                val actual = MoveMaker().readCoordinatesFromConsole(CELLS, true, 1 to 2)
                assertEquals(expected, actual)
            }

            @Test
            fun should_return_null_because_first_value_from_console_was_null() {
                val actual = MoveMaker().readCoordinatesFromConsole(CELLS, true, null to 4)
                assertNull(actual)
            }

            @Test
            fun should_return_null_because_second_value_from_console_was_null() {
                val actual = MoveMaker().readCoordinatesFromConsole(CELLS, true, 1 to null)
                assertNull(actual)
            }
        }

        /** We should not repeat tests for methods used in the method. */
        class CheckCoordinatesTest {
            companion object {
                const val smallestValidValue = 1
                const val biggestValidValue = 3
            }
        }
    }
  learner_created: false
- name: test/tictactoe/CellsHelperTest.kt
  visible: true
  text: |-
    package tictactoe

    import org.junit.Test
    import org.junit.Assert.*

    internal class CellsHelperTest {
        class ConvertCoordinateToCellsIndexTest {
            @Test
            fun testTest() {
                assertTrue(true)
            }

            // We don't check, whether coordinate fits in a cells unit (3x3).

            @Test
            fun should_convert_r1_c1() {
                val actual = CellsHelper.convertCoordinateToCellsIndex(1, 1)
                val expected = 0
                assertEquals(expected, actual)
            }

            @Test
            fun should_convert_r2_c3() {
                val actual = CellsHelper.convertCoordinateToCellsIndex(2, 3)
                val expected = 5
                assertEquals(expected, actual)
            }

            @Test
            fun should_convert_r3_c3() {
                val actual = CellsHelper.convertCoordinateToCellsIndex(3, 3)
                val expected = 8
                assertEquals(expected, actual)
            }
        }

        class AddMoveToCellsTest {
            private val testCells = "012345678"

            @Test
            fun should_add_move_at_1_3() {
                val actual = CellsHelper.addMoveToCells(testCells, 1 to 3)
                val expected = "01X345678"
                assertEquals(expected, actual)
            }

            @Test
            fun should_add_move_at_first_index() {
                val actual = CellsHelper.addMoveToCells(testCells, 1 to 1)
                val expected = "X12345678"
                assertEquals(expected, actual)
            }

            @Test
            fun should_add_move_at_last_index() {
                val actual = CellsHelper.addMoveToCells(testCells, 3 to 3)
                val expected = "01234567X"
                assertEquals(expected, actual)
            }
        }
    }
  learner_created: false
- name: test/tictactoe/MoveMakerTest.kt
  visible: true
  text: |-
    package tictactoe

    import org.junit.Assert
    import org.junit.Test

    class MoveMakerTest {
        @Test
        fun testTest(){
            Assert.assertTrue(true)
        }

        class CheckForNotNullTest {
            @Test
            fun should_invalidate_first_value_if_is_null() {
                val actual = MoveMaker.isCoordinateGiven(null, 1)
                Assert.assertFalse(actual)
            }

            @Test
            fun should_invalidate_second_value_if_is_null() {
                val actual = MoveMaker.isCoordinateGiven(2, null)
                Assert.assertFalse(actual)
            }

            @Test
            fun should_validate_first_value_if_is_null() {
                val actual = MoveMaker.isCoordinateGiven(2, 1)
                Assert.assertTrue(actual)
            }
        }

        class IsCoordinateInBordersTest {
            @Test
            fun should_validate_coordinate_in_borders_for_r3_c1() {
                val actual = MoveMaker.isCoordinateInBorders(3, 1)
                Assert.assertTrue(actual)
            }

            @Test
            fun should_validate_coordinate_in_borders_for_r3_c3() {
                val actual = MoveMaker.isCoordinateInBorders(3, 3)
                Assert.assertTrue(actual)
            }

            @Test
            fun should_invalidate_coordinate_in_borders_because_row_too_big_with_4() {
                val actual = MoveMaker.isCoordinateInBorders(4, 1)
                Assert.assertFalse(actual)
            }

            @Test
            fun should_invalidate_coordinate_in_borders_because_col_too_big_with_4() {
                val actual = MoveMaker.isCoordinateInBorders(2, 4)
                Assert.assertFalse(actual)
            }

            @Test
            fun should_invalidate_coordinate_in_borders_because_row_too_small_with_0() {
                val actual = MoveMaker.isCoordinateInBorders(0, 2)
                Assert.assertFalse(actual)
            }

            @Test
            fun should_invalidate_coordinate_in_borders_because_col_too_small_with_minus1() {
                val actual = MoveMaker.isCoordinateInBorders(3, -1)
                Assert.assertFalse(actual)
            }
        }

        class IsCoordinateFreeTest {
            @Test
            fun should_validate_coordinate_is_free() {
                val actual = MoveMaker.isCoordinateFree(ReadCoordinateTest.CELLS, 3, 1)
                Assert.assertTrue(actual)
            }

            @Test
            fun should_invalidate_coordinate_is_free() {
                val actual = MoveMaker.isCoordinateFree(ReadCoordinateTest.CELLS, 1, 3)
                Assert.assertFalse(actual)
            }
        }
    }
  learner_created: false
- name: src/tictactoe/MoveMaker.kt
  visible: true
  text: |-
    package tictactoe

    import java.util.*

    /** Organizes moves */
    class MoveMaker {
        companion object {
            internal fun isCoordinateGiven(first: Int?, second: Int?) =
                    !(first == null || second == null)

            internal fun isCoordinateInBorders(row: Int, column: Int) =
                    row in 1..3 && column in 1..3

            internal fun isCoordinateFree(cells: String, row: Int, column: Int) =
                    cells[CellsHelper.convertCoordinateToCellsIndex(row, column)] == EMPTY_CELL
        }

        /** Get 'cells' including a move from the user. This move is valid. */
        fun makeMove(cells: String, testMove: Pair<Int, Int>? = null): String {
            val move: Pair<Int, Int> = testMove ?: getMove(cells)

            return CellsHelper.addMoveToCells(cells, move)
        }

        private val temporaryCoordinates = 0 to 0

        /* Add coordinates for test of the method only. */
        fun getMove(cells: String, coordinatesForTest: Pair<Int, Int> = temporaryCoordinates): Pair<Int, Int> {
            println("Enter the coordinates:")
            var coordinates: Pair<Int, Int>? //row, column
            do {
                var gotCoordinates = false
                coordinates = if (coordinatesForTest == temporaryCoordinates) {
                    readCoordinatesFromConsole(cells)
                } else {
                    coordinatesForTest
                }
                if (coordinates != null) {

                    gotCoordinates = true
                }
            } while (!gotCoordinates)

            return coordinates!!
        }

        internal fun readCoordinatesFromConsole(cells: String,
                                                isTest: Boolean = false,
                                                forTest: Pair<Int?, Int?> = Pair(null, null)): Pair<Int, Int>? {
            val scanner = Scanner(System.`in`)

            val row = if (!isTest) readIntOrNullFromConsole(scanner) else forTest.first
            val column = if (!isTest) readIntOrNullFromConsole(scanner) else forTest.second

            if (!checkCoordinates(cells, row, column)) return null

            return row!! to column!!
        }

        internal fun checkCoordinates(cells: String, row: Int?, column: Int?): Boolean {
            if (!isCoordinateGiven(row, column)) {
                println("You should enter numbers!")
                return false
            }
            if (!isCoordinateInBorders(row!!, column!!)) {
                println("Coordinates should be from 1 to 3!")
                return false
            }
            if (!isCoordinateFree(cells, row, column)) {
                println("This cell is occupied! Choose another one!")
                return false
            }
            return true
        }

        private fun readIntOrNullFromConsole(scanner: Scanner): Int? {
            if (scanner.hasNextInt()) {
                return scanner.nextInt()
            }
            return null
        }
    }
  learner_created: true
- name: src/tictactoe/CellsHelper.kt
  visible: true
  text: |-
    package tictactoe

    class CellsHelper {
        companion object {
            internal fun hasEmptyCells(cells: String) =
                    cells.contains(EMPTY_CELL)

            internal fun countXCells(cells: String) =
                    cells.filter { it.toUpperCase() == X_CELL }.count()

            internal fun countOCells(cells: String) =
                    cells.filter { it.toUpperCase() == O_CELL }.count()

            /** Cell positions in a 3x3 game: 012345678, coordinate (1..3, 1..3) */
            internal fun convertCoordinateToCellsIndex(row: Int, column: Int) =
                    (row - 1) * MAX_COLUMNS + column - 1

            internal fun addMoveToCells(cells: String, move: Pair<Int, Int>): String {
                val index = CellsHelper.convertCoordinateToCellsIndex(move.first, move.second)
                return cells.take(index) + "X" + cells.takeLast(cells.length - (index + 1))
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/123/stages/658/implement
status: Unchecked
record: 5
