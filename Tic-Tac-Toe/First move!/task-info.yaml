type: edu
files:
- name: src/tictactoe/Main.kt
  visible: true
  text: |-
    package tictactoe

    fun main() {
        // write your code here
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.MainKt;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                System.arraycopy(field[row], 0, this.field[row], 0, 3);
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] = FieldState.get(str.charAt(row * 3 + col));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 0;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y++;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        String input;
        Clue(String input, int x, int y) {
            this.input = input;
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() {
            super(MainKt.class);
        }

        static final String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;

            for (String startField : new String[] {
                "_XXOO_OX_",
                "_________",
                "X_X_O____"
            }) {

                for (String input : inputs) {
                    String fullInput = iterateCells(input);

                    String[] strNums = input.split("\\s+");
                    int x = Integer.parseInt(strNums[0]);
                    int y = Integer.parseInt(strNums[1]);

                    if (i % 2 == 1) {
                        // mix with incorrect data
                        fullInput = "4 " + i + "\n" + fullInput;
                    }

                    tests.add(new TestCase<Clue>()
                        .setInput(startField + "\n" + fullInput)
                        .setAttach(new Clue(startField, x, y)));

                    i++;
                }

            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() != 2) {
                return new CheckResult(false,
                    "Can't find two fields inside output");
            }

            TicTacToeField curr = fields.get(0);
            TicTacToeField next = fields.get(1);

            TicTacToeField correctCurr = new TicTacToeField(clue.input);
            TicTacToeField correctNext = new TicTacToeField(correctCurr.field);

            String[] numInputs = iterateCells(clue.x + " " + clue.y).split("\n");
            for (String input : numInputs) {
                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);
                if (correctNext.field[x - 1][y - 1] == FieldState.FREE) {
                    correctNext.field[x - 1][y - 1] = FieldState.X;
                    break;
                }
            }

            if (!curr.equalTo(correctCurr)) {
                return new CheckResult(false,
                    "The first field is not equal to the input field");
            }

            if (!next.equalTo(correctNext)) {
                return new CheckResult(false,
                    "The first field is correct, but the second is not");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/tictactoe/CellTest.kt
  visible: true
  text: |-
    package tictactoe

    import org.junit.Test
    import org.junit.Assert.*

    class CellTest {
        companion object {
            const val CELLS_WITH_ROW_0_TAKEN_BY_X = "XXXO_OOO_"
            const val CELLS_WITH_COLUMN_TAKEN_BY_O = "XO_XO__O_"
            const val CELLS_WITH_SLASH_LINE_TAKEN_BY_O = "X_OXO_O__"
            const val CELLS_WITH_BACK_SLASH_LINE_TAKEN_BY_X = "X_O_XO_OX"
            const val CELLS_WITH_NO_LINE_TAKEN = "XO_______"
            const val CELLS_WITH_REGULAR_CHARACTERS_AND_LENGTH = "XOXO_____"
            const val CELLS_TOO_SHORT = "XOXO__"
            const val CELLS_TOO_LONG = "XOXO_____XO" //11 characters
            const val CELLS_WITH_INVALID_CHARACTERS = "XOXO1#_ _"
            const val CELLS_WITH_PLAYER_CELLS_COUNT_OFF_BALANCE = "XXXO_____"
            const val CELLS_WITH_PLAYER_CELLS_COUNT_OK = "XXOO_____"
            const val CELLS_WITH_UNFINISHED_GAME = "XXOO_____"
            const val CELLS_WITH_STALE_MATE = "XOXXXOOXO"
        }

        @Test
        fun testTest() {
            assertTrue(true)
        }

        class HasEmptyCellsTest {
            @Test
            fun should_detect_empty_cells() {
                val expected = true
                val actual = hasEmptyCells("XXXOO__O_")
                assert(actual == expected) { "Should detect empty cell. result: $actual" }
            }

            @Test
            fun should_not_detect_empty_cell() {
                val expected = false
                val actual = hasEmptyCells("XXXOOXXO0")
                assert(actual == expected) { "Should not detect empty cell. result: $actual" }
            }
        }

        class CountXCellsTest {
            @Test
            fun should_count_x_cells() {
                val expected = 3
                val actual = countXCells("XXXOO__O_")
                assert(actual == expected) { "Should count $expected X cells. Counted: $actual" }
            }

            @Test
            fun should_count_0_x_cells() {
                val expected = 0
                val actual = countXCells("___OO__O_")
                assert(actual == expected) { "Should count $expected X cells. Counted: $actual" }
            }
        }

        class CountOCellsTest {
            @Test
            fun should_count_x_cells() {
                val expected = 4
                val actual = countOCells("XXXOO_OO_")
                assert(actual == expected) { "Should count $expected O cells. Counted: $actual" }
            }

            @Test
            fun should_count_0_O_cells() {
                val expected = 0
                val actual = countOCells("XXX___XX_")
                assert(actual == expected) { "Should count $expected X cells. Counted: $actual" }
            }
        }

        class CountPlayerCellsTest {
            @Test
            fun should_deliver_player_cell_counts() {
                val actual = countPlayerCells("XXXOO_OO_")
                assert(actual.first > 0) { "Should deliver X cells. delivered: ${actual.first}" }
                assert(actual.second > 0) { "Should deliver O cells. delivered: ${actual.second}" }
            }
        }

        class GetPlayerCellTest {
            @Test
            fun should_deliver_player_x_cell_token() {
                val actual = getPlayerToken(Player.X)
                assert(actual == X_CELL) { "Should deliver X cell. delivered: $actual" }
            }

            @Test
            fun should_deliver_player_o_cell_token() {
                val actual = getPlayerToken(Player.O)
                assert(actual == O_CELL) { "Should deliver O cell. delivered: $actual" }
            }
        }

        class TakenLinesCountTest {
            @Test
            fun should_detect_that_no_line_taken_by_x() {
                val expected = 0
                val actual = takenLinesCount(CELLS_WITH_NO_LINE_TAKEN, Player.X)
                assert(actual == expected) { "Should detect that no row taken. expected: $expected, actual: $actual" }
            }

            @Test
            fun should_detect_row_taken_by_x() {
                val expected = 1
                val actual = takenLinesCount(CELLS_WITH_ROW_0_TAKEN_BY_X, Player.X)
                assert(actual == expected) { "Should detect taken row. expected: $expected, actual: $actual" }
            }

            @Test
            fun should_detect_that_column_taken_by_o() {
                val expected = 1
                val actual = takenLinesCount(CELLS_WITH_COLUMN_TAKEN_BY_O, Player.O)
                assert(actual == expected) { "Should detect column taken. expected: $expected, actual: $actual" }
            }

            @Test
            fun should_detect_that_slash_line_taken_by_o() {
                val expected = 1
                val actual = takenLinesCount(CELLS_WITH_SLASH_LINE_TAKEN_BY_O, Player.O)
                assert(actual == expected) { "Should detect slash line taken. expected: $expected, actual: $actual" }
            }

            @Test
            fun should_detect_that_back_slash_line_taken_by_x() {
                val expected = 1
                val actual = takenLinesCount(CELLS_WITH_BACK_SLASH_LINE_TAKEN_BY_X, Player.X)
                assert(actual == expected) { "Should detect back slash line taken. expected: $expected, actual: $actual" }
            }
        }

        class HasValidCharactersTest {
            @Test
            fun should_detect_that_cells_contains_right_characters_only() {
                val expected = true
                val actual = hasValidCharacters(CELLS_WITH_REGULAR_CHARACTERS_AND_LENGTH)
                assert(actual == expected) {
                    "Should detect that cells contains valid characters only. " +
                            "expected: $expected, actual: $actual"
                }
            }

            @Test
            fun should_detect_that_cells_contains_invalid_characters() {
                val expected = false
                val actual = hasValidCharacters(CELLS_WITH_INVALID_CHARACTERS)
                assert(actual == expected) {
                    "Should detect that cells contains invalid characters." +
                            " expected: $expected, actual: $actual"
                }
            }
        }

        class HasValidLengthTest {
            @Test
            fun should_detect_that_cells_length_is_ok() {
                val expected = true
                val actual = hasValidLength(CELLS_WITH_REGULAR_CHARACTERS_AND_LENGTH)
                assert(actual == expected) {
                    "Should detect that cell length is ok. " +
                            "expected: $expected, actual: $actual"
                }
            }

            @Test
            fun should_detect_cells_too_short() {
                val expected = false
                val actual = hasValidLength(CELLS_TOO_SHORT)
                assert(actual == expected) {
                    "Should detect that cell length is too short. " +
                            "expected: $expected, actual: $actual"
                }
            }

            @Test
            fun should_detect_cells_too_long() {
                val expected = false
                val actual = hasValidLength(CELLS_TOO_LONG)
                assert(actual == expected) {
                    "Should detect that cell length is too long. " +
                            "expected: $expected, actual: $actual"
                }
            }
        }

        class IsWinnerTest {
            @Test
            fun should_detect_player_is_winner() {
                val expected = true
                val actual = isWinner(Player.X, CELLS_WITH_ROW_0_TAKEN_BY_X)
                assert(actual == expected) {
                    "Should detect that X is winner. " +
                            "expected: $expected, actual: $actual"
                }
            }

            @Test
            fun should_detect_that_player_is_not_winner() {
                val expected = false
                val actual = isWinner(Player.O, CELLS_WITH_ROW_0_TAKEN_BY_X)
                assert(actual == expected) {
                    "Should detect that player is not winner. " +
                            "expected: $expected, actual: $actual"
                }
            }
        }

        class CheckGameStateTest {
            @Test
            fun should_detect_stale_mate() {
                val expected = GameState.StaleMate
                val actual = checkGameState(CELLS_WITH_STALE_MATE)
                assert(actual == expected) {
                    "Should detect stale mate" +
                            "expected: $expected, actual: $actual"
                }
            }

            @Test
            fun should_detect_game_goes_on() {
                val expected = GameState.GameGoesOn
                val actual = checkGameState(CELLS_WITH_UNFINISHED_GAME)
                assert(actual == expected) {
                    "Should detect game goes on" +
                            "expected: $expected, actual: $actual"
                }
            }
        }

        class IsPlayerCellsCountOkTest {
            @Test
            fun should_detect_player_cells_count_ok() {
                val expected = true
                val actual = isPlayerCellsCountOk(CELLS_WITH_PLAYER_CELLS_COUNT_OK)
                assert(actual == expected) {
                    "Should detect that player cells count ok" +
                            "expected: $expected, actual: $actual"
                }
            }

            @Test
            fun should_detect_player_cells_count_wrong() {
                val expected = false
                val actual = isPlayerCellsCountOk(CELLS_WITH_PLAYER_CELLS_COUNT_OFF_BALANCE)
                assert(actual == expected) {
                    "Should detect that player cells count off balance" +
                            " expected: $expected, actual: $actual"
                }
            }
        }
    }
  learner_created: false
- name: test/tictactoe/ReadCoordinateTest.kt
  visible: true
  learner_created: true
- name: src/tictactoe/CellsHelper.kt
  visible: true
  learner_created: true
- name: src/tictactoe/MoveMaker.kt
  visible: true
  learner_created: true
- name: test/tictactoe/CellsHelperTest.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/123/stages/657/implement
status: Failed
feedback:
  message: |-
    Wrong answer in test #1

    Can&#39;t find two fields inside output

    Please find below the output of your program during this failed test.
    Note that the &#39;&gt;&#39; character indicates the beginning of the input line.

    ---

    &gt; _XXOO_OX_
    ---------
    | _ X X |
    | O O _ |
    | O X _ |
    ---------
    Game not finished
  time: Mon, 02 Nov 2020 20:07:43 UTC
record: -1
